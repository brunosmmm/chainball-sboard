#!/usr/bin/env python3
"""Chainball Game."""

import argparse
import logging
import time

from systemd.journal import JournalHandler

from scoreboard.game.engine import ChainballGame
from scoreboard.util.threads import StoppableThread
from scoreboard.util.configfiles import CHAINBALL_CONFIGURATION

# from scoreboard.web import WebBoard
from scoreboard.cbcentral.localdb import update_all
from scoreboard.ipc.server import IPC_HANDLER


class GameWrapper(StoppableThread):
    """Main Game Thread."""

    def __init__(self, virtual_hw, remotes=False):
        """Initialize."""
        super(GameWrapper, self).__init__()
        # create game object
        self.game = ChainballGame(virtual_hw=virtual_hw, remote_score=remotes)
        self.game.post_init()

    def run(self):
        """Run thread."""
        # never exit
        while True:
            if self.is_stopped():
                self.game.shutdown()
                break
            else:
                self.game.game_loop()

            # throttle main loop
            time.sleep(0.1)


if __name__ == "__main__":

    STOP_ENGINE = False

    # Parse Command Line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--nohw",
        action="store_true",
        help="hardware not present, development only",
    )

    args = parser.parse_args()

    if CHAINBALL_CONFIGURATION.configuration_loaded is False:
        print("FATAL: cannot read configuration")
        exit(1)

    MAIN_CONFIG = CHAINBALL_CONFIGURATION.retrieve_configuration("scoreboard")
    if MAIN_CONFIG is None:
        log_file = "scoreboard.log"
    else:
        log_file = MAIN_CONFIG["log_path"]

    # main loop
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s - %(name)s -" " %(levelname)s - %(message)s",
    )

    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    logging.getLogger("").addHandler(console)

    logger = logging.getLogger("sboard")
    logger.addHandler(JournalHandler())

    if CHAINBALL_CONFIGURATION.scoreboard.chainball_server_token is not None:
        logger.info("Connecting to Central server")
        update_all()
    else:
        logger.warning("Server API Token not set, not trying to update")
    logger.info("Scoreboard Starting")

    # signal.signal(signal.SIGINT, _handle_signal)

    # spawn game engine in thread
    GAME_WRAPPER = GameWrapper(args.nohw)
    GAME_WRAPPER.start()
    IPC_HANDLER.associate_game(GAME_WRAPPER.game)
    IPC_HANDLER.start_handler()

    while STOP_ENGINE is False:
        try:
            time.sleep(0.1)
        except KeyboardInterrupt:
            STOP_ENGINE = True

    # spawn web server
    logger.info("Exiting")
    IPC_HANDLER.stop_handler()
    # done, cleanup and exit
    GAME_WRAPPER.stop()
    GAME_WRAPPER.join()
