#!/usr/bin/env python3
"""Chainball Game."""

import argparse
import logging
import signal
import time

from systemd.journal import JournalHandler

from scoreboard.game.engine import ChainballGame
from scoreboard.util.threads import StoppableThread
from scoreboard.util.zeroconf import ZeroconfService
from scoreboard.util.configfiles import CHAINBALL_CONFIGURATION
from scoreboard.web import WebBoard
from scoreboard.cbcentral.localdb import update_all


class GameWrapper(StoppableThread):
    """Main Game Thread."""

    def __init__(self, virtual_hw, remotes=False):
        """Initialize."""
        super(GameWrapper, self).__init__()
        # create game object
        self.game = ChainballGame(virtual_hw=virtual_hw, remote_score=remotes)
        self.game.post_init()

    def run(self):
        """Run thread."""
        # never exit
        while True:
            if self.is_stopped():
                self.game.shutdown()
                break
            else:
                self.game.game_loop()

                # throttle main loop
                time.sleep(0.01)


if __name__ == "__main__":

    def _handle_signal(*whatever):
        exit(0)

    # Parse Command Line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--nohw",
        action="store_true",
        help="hardware not present, development only",
    )
    parser.add_argument("--port", help="web interface port", default=80)

    args = parser.parse_args()

    if CHAINBALL_CONFIGURATION.configuration_loaded is False:
        print("FATAL: cannot read configuration: {}".format(ex))
        exit(1)

    MAIN_CONFIG = CHAINBALL_CONFIGURATION.retrieve_configuration("scoreboard")
    if MAIN_CONFIG is None:
        log_file = "scoreboard.log"
    else:
        log_file = MAIN_CONFIG["log_path"]

    # main loop
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s - %(name)s -" " %(levelname)s - %(message)s",
    )

    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    logging.getLogger("").addHandler(console)

    logger = logging.getLogger("sboard")
    logger.addHandler(JournalHandler())

    # publish as service
    published = False
    try:
        avahi_service = ZeroconfService(
            name="Chainball Scoreboard", port=args.port, stype="_http._tcp"
        )
        avahi_service.publish()
        published = True
    except Exception as ex:
        logger.error("failed to publish scoreboard service: {}".format(ex))

    logger.info("Connecting to Central server")
    update_all()
    logger.info("Scoreboard Starting")

    signal.signal(signal.SIGTERM, _handle_signal)

    # spawn game engine in thread
    GAME_WRAPPER = GameWrapper(args.nohw)
    GAME_WRAPPER.start()

    # web server
    # NOT THREAD SAFE
    WEB_SCOREBOARD = WebBoard(args.port, GAME_WRAPPER.game, bind_all=True)

    # spawn web server
    WEB_SCOREBOARD.run()

    # done, cleanup and exit
    GAME_WRAPPER.stop()
    if published:
        avahi_service.unpublish()
